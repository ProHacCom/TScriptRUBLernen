use namespace canvas;
var uname;
var points = 0;
var lives = 5;
function text_settings(){setFillColor(0,1,1); setTextAlign("center");};
var topics = ["erste Programme", "Kontrollstrukturen", "Funktionen", "Container", "Datentypen", "Rekursion", "Debugging", "Anonyme Funktionen", "Algorithmische Denkweise", "Datenzentrierte Denkweise", "Formale Verifikation", "Laufzeitanalyse", "Sortieralgorithmen", "Repräsentation von Daten im Rechner", "Boole'sche Algebra", "Objektorientierte Programmierung", "LIFO und FIFO", "AVL-Bäume", "Hash-Tabellen", "Python"];
var now_topic;


class Multiple_Choise {
	private:
		var question;
		var answers;
	public:
		constructor(qes, ans){
			question = qes;
			if Type(ans) != Type([]) then error("Answer has to be an Array of answers");
			else if ans.size() > 5 then error("Max 5 answers");
			answers = ans;
		}
		function draw_answer(){
			setFillColor(0,0,0);
			clear();
			text_settings();
			setFont("Helvetica", math.min(height(), width())/20);
			text(width()/2, 20, question);
			setLineColor(0,1,1);
			line(0, math.min(height(), width())/20 + width()/18,width(), math.min(height(), width())/20 + width()/18);
			for var i in 0:answers.size() do{
				setFillColor(math.random(),math.random(),math.random());
				text(width()/2, (i + 1) * width()/11, answers[i]);
				rect(width()/30,(i + 1) * width()/11, width()/20, width()/20);
			}

		}
		function qes_ans_getter(){
			print(question);
			print(answers);
		}
		function ans_getter(){
			return answers;
		}
}

function ask_name(){
	setFillColor(0,0,0);
	clear();
	text_settings();
	setFont("Helvetica", math.min(height(), width())/15);
	text(width()/2, height()/2, "Geben sie bitte Ihren Nutzernamen ein \n Die Nutzung wird im Vollbildmodus empfohlen!!");
}

function draw_topics(){
	setFillColor(0,0,0);
	clear();
	text_settings();
	setFont("Helvetica", math.min(height(), width())/30);
	for var i in 0:topics.size() do{
		if i < 10 then{
			text(width() / 4 , height() / 12 + i * height() / 11, topics[i]);
		}
		else {
			text(width() / 4 * 3, height() / 12 +  (i - 10) * height() / 11, topics[i]);
		}
	}
	setLineColor(0, 0.8, 0.8);
	for var i in 1:10 do{
		line(0, height() / 20 + i * height() / 11, width(), height() / 20 + i * height() / 11);
	}
	line(width()/2, 0, width()/2, height());
}

var tempname = "";
function keydown(event){

	# Quit
	if event.key == "q" then quitEventMode();

	# Username Input
	if uname == null then{
		if event.key.size() < 2 then{
			tempname += event.key;
		}
		else if event.key == "Enter" and tempname.size() > 0 then {
			uname = tempname;
			draw_topics();
		}
	}
}


var q1 = Multiple_Choise("Frage\n zweite Zeile", ["Antwort 1\n zweite Zeile\n dritte", "Antwort 2",  "Antwort 3", "Antwort 4", "Antwort 5"]);
#print(q1.qes_ans_getter());
#q1.draw_answer();

var mul_qes_bool = false;
var mul_qes_now = q1;
var mul_qes_true = [];



function mousedown(event){

	# select topic
	var temp_topic = 0;
	if now_topic == null and uname != null then{
		if event.x >= width() / 2 then{
			temp_topic = 10;
		}
		for var i in 0:11 do{
			if event.y < height() / 20 + i * height() / 11 then{
				temp_topic += i - 1;
				now_topic = topics[temp_topic];
				print(now_topic);
				return;
			}
		}
	}

	# multiple-choise boxen with mouse
	if mul_qes_bool == true then{
		if event.x > width()/30 and event.x < (width()/30 + width()/20) then {
			for var i in 0:mul_qes_now.ans_getter().size() do{
				if event.y > (i + 1) * width()/11 and event.y < (i + 1) * width()/11 +  width()/ 20 then{
					setFillColor(math.random(),math.random(),math.random());
					mul_qes_true.push(i);
					fillRect(width()/30,(i + 1) * width()/11, width()/20, width()/20);
					mul_qes_true.sort();
					print(mul_qes_true);
					if mul_qes_true.size() > 1 then{
						for var j in 1:mul_qes_true.size() do{
							print(mul_qes_true.size());
							if mul_qes_true[j-1] == mul_qes_true[j] then{
								setFillColor(0,0,0);
								fillRect(width()/30,(mul_qes_true[j]+1) * width()/11, width()/20, width()/20);
								mul_qes_true.remove(j-1);
								mul_qes_true.remove(j-1);
								break;
							}
						}
					}
					print(mul_qes_true);
				}
			}
		}
	}

}


#setEventHandler();

# Main

ask_name();
if uname != null then draw_topics();



setEventHandler("canvas.keydown", keydown);
setEventHandler("canvas.mousedown", mousedown);
enterEventMode();