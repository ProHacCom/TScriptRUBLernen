use namespace canvas;
var uname;
var points = 0;
var lives = 5;
function text_settings(){setFillColor(0,1,1); setTextAlign("center");};
var topics = ["erste Programme", "Kontrollstrukturen", "Funktionen",
"Container", "Datentypen", "Rekursion", "Debugging", "Anonyme Funktionen",
"Algorithmische Denkweise", "Datenzentrierte Denkweise", "Formale Verifikation", "Laufzeitanalyse", "Sortieralgorithmen",
"Repräsentation von Daten im Rechner", "Boole'sche Algebra", "Objektorientierte Programmierung", "LIFO und FIFO", "AVL-Bäume",
"Hash-Tabellen", "Python"];
var now_topic;
var modus;
var modus_name;
setLineWidth(1);

class Question{
	protected:
		var question;
		var answers;
	public:
		constructor(qes, ans){
			if Type(qes)!= String then error("Question hast to be an String");
			question = qes;
			if Type(ans) != Type([]) then error("Answer has to be an Array of answers");
			else if ans.size() > 5 then error("Max 5 answers");
			answers = ans;
		}


		function qes_ans_getter(){
			print(question);
			print(answers);
		}


		function ans_getter(){
			return answers;
		}

		function draw(){
			setFillColor(0,0,0);
			clear();
			text_settings();
			setFont("Helvetica", math.min(height(), width())/20);
			text(width()/2, 20, question);
			setLineColor(0,1,1);
			line(0, math.min(height(), width())/20 + width()/18,width(), math.min(height(), width())/20 + width()/18);
			for var i in 0:answers.size() do{
				setFillColor(math.random(),math.random(),math.random());
				text(width()/2, (i + 1) * width()/11, answers[i]);
			}
			rect(width()/32*27,width()/50, width()/8, width()/20);
			setTextAlign("left");
			setFont("Helvetica", math.min(height(), width())/19);
			setFillColor(0,1,0);
			text(width()/32*27,width()/50, "Abgabe");
			text_settings();
		}
}



class Multiple_Choise : Question{
	public:
		var correct_ans;
		constructor(qes, ans, c_ans) : super(qes, ans) {
			if Type(c_ans) != Type([]) then error("Correct Answers has to be an Array of Booleans");
			else if c_ans.size() != ans.size() then error("Answers(Arraw of Strings).size() = Correct Answers(Arraw of Boolean).size()");
			correct_ans = c_ans;
		}


		function draw_answer(){
			super.draw();
			for var i in 0:super.answers.size() do{
				rect(width()/30,(i + 1) * width()/11, width()/20, width()/20);
			}
		}
}


class Sequence_Question : Question {
	public:
		constructor(qes, ans):super(qes, ans){
		}

		function draw_answer(){
			super.draw();
		}
}


# muliple choise questions
var algorithmus = Multiple_Choise("Was ist ein Algorithmus?", ["eine definierte Abfolge elementarer Anweisungen", "ein mathematisches Problem", "eine IDE", "eine GUI", "ein UI"], [true, false, false, false, false]);
var problem = Multiple_Choise("Was ist wichtig für eine gute Problemstellung?", ["viel Spielram in der Interpretation", "klar und deutlich definiertes Probem", "beliebig lange Eingabe und Ausgabe", "endliche Länge von Eingabe und Ausgabe", "Problem-Instanzen(Problem ist Klasse von Problem-Instanzen) \n als Beispiele geben"], [false, true, false, true, true]);
var darstellung_algo = Multiple_Choise("Welche Möglichkeiten gibt es Algorithmen darzustellen?", ["Pseudocode", "Flussdiagramm", "Struktogramme", "Zustandsdiagramme", "Baumwechselmediumdiagramme"], [true, true, true, true, false]);
var variablen = Multiple_Choise("Welche Aussagen über Variablen sind richtig?", ["\" Gedächnis\"/\"Speicherplatz\"", "sind unveränderlich in TScript", "während der Bearbeitung kann sich der Wert ändern", "sind das absolut gleiche wie mathematische Variablen", "unterscheiden sich von mathematischen Variablen durch \n die Veränderlichkeit"],[true, false, true, false, true]);
var algo_entwicklung = Multiple_Choise("Wie entwickelt man Algorithmen für komplizierte Probleme?", ["zerlegen in einfache Probleme, \n welche wir bereits lösen können", "elementare Operationen so verknüpfen, dass \n komplizierte Probleme gelöst werden", "aufgeben", "in Stackoverflow nach informationen suchen", "Döner essen gehen"], [true, true, false, true, false]);
var algo_korrekt = Multiple_Choise("Algorithmus heißt korrekt, wenn", ["wenn er nur terminiert(Berechnung in endlicher Zeit)", "wenn er nur für jede erlaubte Eingabe das in \n der Problemstellung geforderte Ergebnis produziert", "wenn er terminiert und für jede erlaubte Eingabe das in \n der Problemstellung geforderte Ergebnis produziert", "es ist egal, ob Algo. in endlicher Zeit beendet wird \n aber er muss größtenteils richtige Ergebnisse liefern", "wenn er größtenteils das richtige Ergebnis liefert"],[false, false, true, false, false]);
var programmiersprachen = Multiple_Choise("Welche Aussagen über Programmiersprachen sind richtig?", ["setzten sich aus höher abstrahierten Operationen zusammen\n ->kleine Algorithmen in elementaren Operationen des Rechners programmiert", "es gibt Interpretationsspielraum", "Sprache in welcher Anweisungen exakt formuliert werden können \n (exakte Syntax, exakte Semantik)", "die Syntax ist die \" Rechtschreibregelung \" und \" Grammatik \" ", "die Semantik ist die Bedeutung jeder Anweisung"], [true, false, true, true, true]);
var q1 = Sequence_Question("Ans", [1,2,3,4,5]);


# topic question list
var first_programs = [algorithmus, problem, darstellung_algo, variablen, algo_entwicklung, algo_korrekt, programmiersprachen];
var control_structures = [q1];
var functions = [];
var containers = [];
var data_types = [];
var recursion = [];
var debugging = [];
var anonymous_functions = [];
var algorithmic_thinking = [];
var data_centered_thinking = [];
var formal_verification = [];
var runtime_analysis = [];
var sorting_algorithms = [];
var representation_of_data_in_computer = [];
var boolean_algebra =[];
var object_oriented_programming = [];
var lifo_and_fifo = [];
var avl_trees = [];
var hash_tables = [];
var python3 = [];
var sel_topic = [first_programs, control_structures, functions, containers, data_types, recursion, debugging, anonymous_functions,
algorithmic_thinking, data_centered_thinking, formal_verification, runtime_analysis, sorting_algorithms,
representation_of_data_in_computer, boolean_algebra, object_oriented_programming, lifo_and_fifo, avl_trees, hash_tables, python3];



function ask_name(){
	setFillColor(0,0,0);
	clear();
	text_settings();
	setFont("Helvetica", math.min(height(), width())/15);
	text(width()/2, height()/2, "Geben sie bitte Ihren Nutzernamen ein \n Die Nutzung wird im Vollbildmodus empfohlen!!");
}


function draw_topics(){
	setFillColor(0,0,0);
	clear();
	text_settings();
	setFont("Helvetica", math.min(height(), width())/30);
	for var i in 0:topics.size() do{
		if i < 10 then{
			text(width() / 4 , height() / 12 + i * height() / 11, topics[i]);
		}
		else {
			text(width() / 4 * 3, height() / 12 +  (i - 10) * height() / 11, topics[i]);
		}
	}
	setLineColor(0, 0.8, 0.8);
	for var i in 1:10 do{
		line(0, height() / 20 + i * height() / 11, width(), height() / 20 + i * height() / 11);
	}
	line(width()/2, 0, width()/2, height());
}

function move_to_topic(){
	setFillColor(0,0,0);
	clear();
	text_settings();
	setFont("Helvetica", math.min(height(), width())/30);
	text(width()/2, 40, modus_name);
	text(width()/2, 1 * width()/15 + 40, "Anzahl Fragen: " + modus.size());
	var many_mq = 0;
	for var i in 0:modus.size() do{
		if Type(modus[i]) == Multiple_Choise then many_mq += 1;
	}
	text(width()/2, 2 * width()/15 + 40, "Anzahl multiple Choise Fragen: " + many_mq);
	rect(width()/2- 1/2 * width()/12, height()/8*7, width()/10, height()/10);
	setFillColor(0,1,0);
	setTextAlign("left");
	text(width()/2- 1/2 * width()/12, height()/8*7, "starten");
	text_settings();
}


var tempname = "";
function keydown(event){

	# Username Input
	if uname == null then{
		if event.key.size() < 2 then{
			tempname += event.key;
			ask_name();
			text(width()/2, height()/3*2, tempname);
		}
		else if event.key == "Enter" and tempname.size() > 0 then {
			uname = tempname;
			draw_topics();
		}
		else if event.key == "Backspace" or event.key == "Delete" then{
			tempname = tempname[0:tempname.size()-1];
			ask_name();
			text(width()/2, height()/3*2, tempname);
		}
	}
}


var q1 = Multiple_Choise("Frage\n zweite Zeile",
["Antwort 1\n zweite Zeile\n dritte", "Antwort 2",  "Antwort 3", "Antwort 4", "Antwort 5"],
[true, false, true, false, true]);


var mul_qes_bool = true;
var mul_qes_now = q1;
var mul_qes_true = [];
var mul_qes_finished = false;
var rand;


function rand_sel(){
	if modus.size() == 0 then return;
	rand = Integer(math.round(math.random() * modus.size()) - 1);
	if rand < 0 then rand = Integer(0);
	if Type(modus[rand]) == Multiple_Choise or modus[rand]) == Sequence_Question then{
		modus[rand].draw_answer();
	}
	mul_qes_now = modus[rand];
	return rand;
}


function mousedown(event){

	# select topic
	var temp_topic = 0;
	if now_topic == null and uname != null then{
		if event.x >= width() / 2 then{
			temp_topic = 10;
		}
		for var i in 0:11 do{
			if event.y < height() / 20 + i * height() / 11 then{
				temp_topic += i - 1;
				now_topic = topics[temp_topic];
				#print(now_topic);
				setFillColor(0,1,0);
				if temp_topic < 10 then{
					text(width() / 4 , height() / 12 + temp_topic * height() / 11, topics[temp_topic]);
				}
				else {
					text(width() / 4 * 3, height() / 12 +  (temp_topic - 10) * height() / 11, topics[temp_topic]);
				}
				print("temp_topic:" + temp_topic);
				modus = sel_topic[temp_topic];
				modus_name = topics[temp_topic];
				wait(750);
				print("Modus:" + modus);
				print("Modus Name:" + modus_name);
				text_settings();
				move_to_topic();
				return;
			}
		}
	}

	# Check start-box in a topic
	if modus != null then{
		#ect(width()/2- 1/2 * width()/12, height()/8*7, width()/10, height()/10);
		if event.x > width()/2- 1/2 * width()/12 and event.x < width()/2 + 1/2 * width()/10 then{
			if event.y > height()/8*7 and event.y < height()/8*7 + height()/10 then{
				rand_sel();
			}
		}
	}


	# multiple-choise boxen with mouse
	if mul_qes_bool == true and mul_qes_finished == false then{

		# activate and deactivate multiple-choise boxes with mous
		if event.x > width()/30 and event.x < (width()/30 + width()/20) then {
			for var i in 0:mul_qes_now.ans_getter().size() do{
				if event.y > (i + 1) * width()/11 and event.y < (i + 1) * width()/11 +  width()/ 20 then{
					setFillColor(math.random(),math.random(),math.random());
					mul_qes_true.push(i);
					fillRect(width()/30,(i + 1) * width()/11, width()/20, width()/20);
					mul_qes_true.sort();
					if mul_qes_true.size() > 1 then{
						for var j in 1:mul_qes_true.size() do{
							if mul_qes_true[j-1] == mul_qes_true[j] then{
								setFillColor(0,0,0);
								fillRect(width()/30,(mul_qes_true[j]+1) * width()/11, width()/20, width()/20);
								mul_qes_true.remove(j-1);
								mul_qes_true.remove(j-1);
								break;
							}
						}
					}
				}
			}
		}

		# check, if the answers are correct
		if event.x > width()/32*27 and event.x < width()/32*27 + width()/8 then{
			if event.y > width()/50 and event.y < width()/50 + width()/20 then{
				var true_false = []; # true -> wenn richtige Antwort
				var temp_mul_qes_true = [false, false, false, false, false];
				for var i in 0:mul_qes_true.size() do{
					temp_mul_qes_true[mul_qes_true[i]] = true;
				}
				for var i in 0:temp_mul_qes_true.size() do{
					if temp_mul_qes_true[i] == mul_qes_now.correct_ans[i] then true_false.push(true);
					else true_false.push(false);
					setLineWidth(width()/100);
					if true_false[i] == true then {
						setLineColor(0,1,0);
						points +=1;
						print(points);
					}
					else setLineColor(1,0,0);
					rect(width()/30,(i + 1) * width()/11, width()/20, width()/20);
					setFillColor(0,0,0);
					setLineWidth(1);
					frameRect(width()/32*27,width()/50, width()/8, width()/20);
					setTextAlign("left");
					setFont("Helvetica", math.min(height(), width())/19);
					setFillColor(0,1,0);
					text(width()/32*27,width()/50, "weiter");
					text_settings();
					mul_qes_finished = true;
				}
			}
		}
	}
	else if mul_qes_bool == true and mul_qes_finished == true then{
		if event.x > width()/32*27 and event.x < width()/32*27 + width()/8 then{
			if event.y > width()/50 and event.y < width()/50 + width()/20 then{
				modus.remove(rand);
				rand_sel();
				mul_qes_finished = false;
				mul_qes_true = [];
			}
		}
	}
}



# Main
ask_name();
if uname != null and modus == null then draw_topics();

setEventHandler("canvas.keydown", keydown);
setEventHandler("canvas.mousedown", mousedown);
enterEventMode();
